static String computeVersion(Project project) {
    if(project.hasProperty("deps") || project == project.rootProject) {
        def projects = project == project.rootProject ? project.subprojects : project.deps.split(",").collect { project.rootProject.project(it) }
        def curr = project.vers.split("\\.")
        int major = Integer.parseInt(curr[0]), minor = Integer.parseInt(curr[1]), build = Integer.parseInt(curr[2])
        projects.each {
            def depVers = computeVersion(it)
            def str = depVers.split("\\.")
            major += Math.max(Integer.parseInt(str[0])-1, 0)
            minor += Integer.parseInt(str[1])
            build += Integer.parseInt(str[2])
        }
        return major + "." + minor + "." + build
    } else {
        return project.vers
    }
}

allprojects {
    sourceCompatibility = JavaVersion.VERSION_16
    targetCompatibility = JavaVersion.VERSION_16
    group = 'io.github.astrarre'
    if (project != rootProject) {
        plugins.apply 'java'
        plugins.apply 'idea'
        plugins.apply 'eclipse'
        plugins.apply 'java-library'
        plugins.apply 'maven-publish'
        plugins.apply "fabric-loom"
    }

    minecraft {}
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://raw.githubusercontent.com/Devan-Kerman/Devan-Repo/master/' }
        maven { url 'https://maven.fabricmc.net/' }
        maven { url 'https://storage.googleapis.com/devan-maven/'}
        maven { url 'https://jitpack.io' }
        maven { url 'https://maven.legacyfabric.net/' }
        maven { url "https://maven.shedaniel.me/" }
    }

    sourceSets {
        testmod {
            compileClasspath += sourceSets.main.runtimeClasspath
            runtimeClasspath += sourceSets.main.runtimeClasspath
        }

        test {
            compileClasspath += sourceSets.main.compileClasspath
            runtimeClasspath += sourceSets.main.compileClasspath
        }
    }

    dependencies {
        minecraft "com.mojang:minecraft:${minecraft_version}"
        mappings "net.fabricmc:yarn:${yarn_mappings}:v2"
        modImplementation "net.fabricmc:fabric-loader:${loader_version}"
        testImplementation('junit:junit:4.13.1') {
            exclude module: 'fabric-loader'
        }
        testImplementation('net.devtech:PotatoUnit:1.0.3') {
            exclude module: 'fabric-loader'
        }
        //testmodImplementation sourceSets.main.output
        testmodImplementation('com.github.astei:lazydfu:0.1.1') {
            exclude module: 'fabric-loader'
            exclude module: 'fabric-api'
        }

        // check for conflicts
        modRuntime("net.fabricmc.fabric-api:fabric-api:${fabric_version}") {
            exclude module: 'fabric-loader'
        }

        if (project.hasProperty("deps") || project == rootProject) {
            def projs = project == project.rootProject ? project.subprojects : project.deps.split(",").collect { project.rootProject.project(it) }
            projs.each {
                println "\t|- " + it.name
                api it
            }
        }
    }

    version = computeVersion(project)

    apply from: "$rootProject.rootDir/scripts/maven.gradle"
    apply from: "$rootProject.rootDir/scripts/misc.gradle"
}